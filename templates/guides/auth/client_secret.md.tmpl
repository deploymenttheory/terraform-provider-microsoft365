---
page_title: "Authentication with Client Secret"
subcategory: "Authentication"
description: |-
  This guide demonstrates how to authenticate with Microsoft 365 using a client secret.
---

# Authentication with Client Secret

The Microsoft 365 provider can use a Service Principal with Client Secret to authenticate to Microsoft 365 services. This is a common authentication method for automated processes and CI/CD pipelines.

## Table of Contents

- [Prerequisites](#prerequisites)
- [Setup](#setup)
  - [Manual Setup](#manual-setup)
  - [Setup Using Terraform](#setup-using-terraform)
  - [Setup Using PowerShell](#setup-using-powershell)
- [Configuration](#configuration)
  - [Using Terraform Configuration](#using-terraform-configuration)
  - [Using Environment Variables](#using-environment-variables-recommended)
- [Integration with HashiCorp Vault](#integration-with-hashicorp-vault)
  - [Storing Credentials in Vault](#storing-credentials-in-vault)
  - [Retrieving Credentials During Terraform Runs](#retrieving-credentials-during-terraform-runs)
  - [Vault Agent Integration](#vault-agent-integration)
- [Security Considerations](#security-considerations)
- [Troubleshooting](#troubleshooting)

## Prerequisites

- A Microsoft Entra ID tenant
- Permissions to create an app registration in your tenant

## Setup

### Manual Setup

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
   - Navigate to "API permissions" in your app registration
   - Click "Add a permission" and select "Microsoft Graph"
   - Choose "Application permissions" for automation scenarios or "Delegated permissions" for user context
   - **Apply least privilege principles**: Only add permissions specific to the resources you need to manage
   - Click "Grant admin consent" for these permissions
3. Create a client secret in the app registration
   - Navigate to "Certificates & secrets" in your app registration
   - Click "New client secret"
   - Provide a description and select an expiration period
   - Copy the secret value immediately (it won't be displayed again)

### Setup Using Terraform

You can also create the app registration using Terraform with the AzureAD provider:

```terraform
terraform {
  required_providers {
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.47.0"
    }
  }
}

provider "azuread" {
  # Configuration options
}

# Create an application registration
resource "azuread_application" "microsoft365_app" {
  display_name = "Microsoft365 Terraform Provider"
  
  # Optional: Specify app roles, API, web, etc.
  web {
    redirect_uris = ["https://localhost"]
  }
}

# Create a service principal for the application
resource "azuread_service_principal" "microsoft365_sp" {
  application_id = azuread_application.microsoft365_app.application_id
}

# Add Microsoft Graph permissions for Microsoft 365 management
# Apply least privilege principle - only request permissions you actually need
resource "azuread_application_api_permission" "graph_permissions" {
  application_id = azuread_application.microsoft365_app.id
  api_id         = "00000003-0000-0000-c000-000000000000" # Microsoft Graph ID

  # Example: Microsoft Intune device management permissions
  # Only include permissions actually needed for your scenario
  api_permissions {
    id   = "78145de6-330d-4800-a6ce-494ff2d33d07" # DeviceManagementApps.ReadWrite.All
    type = "Role"                                 # Application permission
  }
  
  # Example: If you only need to read configurations, use .Read instead of .ReadWrite
  api_permissions {
    id   = "dc377aa6-52d8-4e23-b271-2a7ae04cedf3" # DeviceManagementConfiguration.Read.All
    type = "Role"                                 # Application permission
  }
}

# Grant admin consent (requires an authenticated provider with sufficient permissions)
resource "azuread_service_principal_api_permission_grant" "grant_admin_consent" {
  service_principal_id = azuread_service_principal.microsoft365_sp.id
  api_id               = "00000003-0000-0000-c000-000000000000" # Microsoft Graph ID
  scope                = each.value

  for_each = toset([
    "DeviceManagementApps.ReadWrite.All",
    "DeviceManagementConfiguration.Read.All",
  ])
  
  depends_on = [
    azuread_application_api_permission.graph_permissions
  ]
}

# Create client secret
resource "azuread_application_password" "microsoft365_app_secret" {
  application_id = azuread_application.microsoft365_app.id
  display_name   = "Terraform Generated Secret"
  end_date       = "2024-12-31T00:00:00Z" # Set appropriate expiration date
}

# Output important values for using the Microsoft365 provider
output "client_id" {
  value     = azuread_application.microsoft365_app.application_id
  sensitive = false
}

output "client_secret" {
  value     = azuread_application_password.microsoft365_app_secret.value
  sensitive = true
}

output "tenant_id" {
  value     = data.azuread_client_config.current.tenant_id
  sensitive = false
}
```

> **Note**: The above Terraform configuration creates an app registration with a limited set of permissions. Always follow the principle of least privilege and only request permissions your application actually needs.

### Setup Using PowerShell

You can also create an app registration using PowerShell, which is useful for automation and scripting scenarios:

```powershell
# Connect to Microsoft Graph with the ability to create applications
Connect-MgGraph -Scopes "Application.ReadWrite.All", "Directory.ReadWrite.All"

# Create a new app registration
$appParams = @{
    DisplayName = "Microsoft365 Terraform Provider"
    SignInAudience = "AzureADMyOrg"
    Web = @{
        RedirectUris = "https://localhost"
    }
}
$app = New-MgApplication @appParams

# Create a service principal for the application
$spParams = @{
    AppId = $app.AppId
    DisplayName = $app.DisplayName
}
$sp = New-MgServicePrincipal @spParams

# Create a new client secret
$credentialParams = @{
    DisplayName = "Terraform Access"
    EndDateTime = (Get-Date).AddYears(1)
}
$credential = Add-MgApplicationPassword -ApplicationId $app.Id @credentialParams

# Define the Microsoft Graph API permissions we need
$graphResourceId = "00000003-0000-0000-c000-000000000000" # Microsoft Graph ID

# Get the app role IDs for the permissions we want
$graphServicePrincipal = Get-MgServicePrincipal -Filter "appId eq '$graphResourceId'"
$permission1 = $graphServicePrincipal.AppRoles | Where-Object { $_.Value -eq "DeviceManagementApps.ReadWrite.All" }
$permission2 = $graphServicePrincipal.AppRoles | Where-Object { $_.Value -eq "DeviceManagementConfiguration.Read.All" }

# Add permissions to the application
$reqResourceAccess = @(
    @{
        ResourceAppId = $graphResourceId
        ResourceAccess = @(
            @{
                Id = $permission1.Id
                Type = "Role"
            },
            @{
                Id = $permission2.Id
                Type = "Role"
            }
        )
    }
)

Update-MgApplication -ApplicationId $app.Id -RequiredResourceAccess $reqResourceAccess

# Grant admin consent (requires admin role)
# Note: This requires additional admin permissions
foreach ($permission in @($permission1.Id, $permission2.Id)) {
    $grantParams = @{
        ClientId    = $sp.Id
        ResourceId  = $graphServicePrincipal.Id
        Scope       = $permission.Value
    }
    # This command requires admin consent rights
    # New-MgOAuth2PermissionGrant @grantParams
    Write-Output "Manual admin consent is required. Please grant consent in the Azure portal."
}

# Output the important information for configuring the Terraform provider
Write-Output "App Registration created successfully"
Write-Output "Tenant ID: $((Get-MgContext).TenantId)"
Write-Output "Client ID: $($app.AppId)"
Write-Output "Client Secret: $($credential.SecretText)"
Write-Output "Remember to grant admin consent for the required permissions in the Azure portal"
```

**Note:** The PowerShell script requires the Microsoft Graph PowerShell SDK, which you can install with:

```powershell
Install-Module Microsoft.Graph -Force
```

After running the script, you'll need to manually grant admin consent for the API permissions in the Azure portal, unless your account has sufficient privileges to grant consent programmatically.

## Configuration

After creating the app registration and client secret, configure the Microsoft 365 provider to use them.

### Using Terraform Configuration

```terraform
provider "microsoft365" {
  auth_method = "client_secret"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id     = "00000000-0000-0000-0000-000000000000"
    client_secret = "your-client-secret"
  }
}
```

### Using Environment Variables

```bash
# Set these environment variables before running Terraform
export M365_TENANT_ID="00000000-0000-0000-0000-000000000000"
export M365_AUTH_METHOD="client_secret"
export M365_CLIENT_ID="00000000-0000-0000-0000-000000000000"
export M365_CLIENT_SECRET="your-client-secret"
```

With environment variables set, your Terraform configuration would still need the provider block:

```terraform
provider "microsoft365" {
  auth_method = "client_secret"
  # The credentials will be read from environment variables
}
```

**Note:** You do not need to map the environment variables to Terraform variables. The provider is designed to automatically read values from environment variables if they're not specified in the provider configuration. When you set environment variables like `M365_TENANT_ID`, `M365_AUTH_METHOD`, `M365_CLIENT_ID`, and `M365_CLIENT_SECRET`, the provider will automatically use those values even if they're not explicitly mapped in your Terraform configuration.

## Integration with HashiCorp Vault

HashiCorp Vault provides a secure way to store and access secrets. You can store Microsoft 365 credentials in Vault and retrieve them during Terraform runs.

### Storing Credentials in Vault

1. Store your Microsoft 365 credentials in Vault:

```bash
# CLI method
vault kv put secret/microsoft365/credentials \
  tenant_id="00000000-0000-0000-0000-000000000000" \
  client_id="00000000-0000-0000-0000-000000000000" \
  client_secret="your-client-secret"

# API method
curl \
  --header "X-Vault-Token: $VAULT_TOKEN" \
  --request POST \
  --data '{"data": {"tenant_id": "00000000-0000-0000-0000-000000000000", "client_id": "00000000-0000-0000-0000-000000000000", "client_secret": "your-client-secret"}}' \
  $VAULT_ADDR/v1/secret/data/microsoft365/credentials
```

### Retrieving Credentials During Terraform Runs

#### Method 1: Using the Vault Provider

```terraform
provider "vault" {
  # Vault provider configuration
}

data "vault_kv_secret_v2" "microsoft365_creds" {
  mount = "secret"
  name  = "microsoft365/credentials"
}

provider "microsoft365" {
  auth_method = "client_secret"
  tenant_id   = data.vault_kv_secret_v2.microsoft365_creds.data["tenant_id"]
  entra_id_options = {
    client_id     = data.vault_kv_secret_v2.microsoft365_creds.data["client_id"]
    client_secret = data.vault_kv_secret_v2.microsoft365_creds.data["client_secret"]
  }
}
```

#### Method 2: Using External Data Source

```terraform
data "external" "vault_secret" {
  program = [
    "/bin/bash", "-c",
    "vault kv get -format=json secret/microsoft365/credentials | jq '{tenant_id: .data.data.tenant_id, client_id: .data.data.client_id, client_secret: .data.data.client_secret}'"
  ]
}

provider "microsoft365" {
  auth_method = "client_secret"
  tenant_id   = data.external.vault_secret.result.tenant_id
  entra_id_options = {
    client_id     = data.external.vault_secret.result.client_id
    client_secret = data.external.vault_secret.result.client_secret
  }
}
```

#### Method 3: Using Environment Variables with Vault CLI

Create a wrapper script to fetch from Vault and set environment variables:

```bash
#!/bin/bash
# fetch-secrets.sh

# Get secrets from Vault
VAULT_DATA=$(vault kv get -format=json secret/microsoft365/credentials)

# Extract values
export M365_TENANT_ID=$(echo $VAULT_DATA | jq -r '.data.data.tenant_id')
export M365_AUTH_METHOD="client_secret"
export M365_CLIENT_ID=$(echo $VAULT_DATA | jq -r '.data.data.client_id')
export M365_CLIENT_SECRET=$(echo $VAULT_DATA | jq -r '.data.data.client_secret')

# Run terraform with the environment variables set
terraform "$@"
```

Then run:

```bash
chmod +x fetch-secrets.sh
./fetch-secrets.sh apply
```

### Vault Agent Integration

For more advanced scenarios, you can use Vault Agent to automatically retrieve and refresh secrets:

1.  Configure Vault Agent template:

```hcl
template {
  destination = "/path/to/terraform.env"
  # Escape the inner {{ and }} for the Go template engine
  contents = <<EOT
  export M365_TENANT_ID={{ "{{" }}with secret "secret/microsoft365/credentials"{{ "}}" }}{{ "{{" }}.Data.data.tenant_id{{ "}}" }}{{ "{{" }}end{{ "}}" }}
  export M365_AUTH_METHOD="client_secret"
  export M365_CLIENT_ID={{ "{{" }}with secret "secret/microsoft365/credentials"{{ "}}" }}{{ "{{" }}.Data.data.client_id{{ "}}" }}{{ "{{" }}end{{ "}}" }}
  export M365_CLIENT_SECRET={{ "{{" }}with secret "secret/microsoft365/credentials"{{ "}}" }}{{ "{{" }}.Data.data.client_secret{{ "}}" }}{{ "{{" }}end{{ "}}" }}
  EOT
}
```

2. Source the environment file before running Terraform:

```bash
source /path/to/terraform.env
terraform apply
```

## Security Considerations

- **Follow the principle of least privilege**: Only request permissions that are absolutely necessary
- Client secrets are sensitive credentials and should be handled securely
- Never commit secrets to version control
- Regularly rotate your client secrets (typically every 90 days)
- Consider using a more secure authentication method like certificate-based authentication or OIDC for production environments
- Use a secrets manager like Azure Key Vault, HashiCorp Vault, or GitHub Secrets to store your credentials

## Troubleshooting

- **Authentication failed**: Verify the tenant ID, client ID, and client secret are correct
- **Permission denied**: Ensure you've granted admin consent for the required permissions
- **Secret expired**: Check if your client secret has expired and create a new one if necessary
- **Insufficient permissions**: Your app registration needs appropriate Microsoft Graph permissions; consult the provider documentation for the specific permissions required by each resource