---
page_title: "Authentication with Workload Identity"
subcategory: "Guides/Authentication"
description: |-
  This guide demonstrates how to authenticate with Microsoft 365 using workload identity federation for Kubernetes.
---

# Authentication with Workload Identity

The Microsoft 365 provider supports workload identity federation, which allows Kubernetes pods to authenticate to Microsoft 365 services without storing client secrets. This provides a more secure approach for containerized applications running in Kubernetes.

> [!NOTE]
> Running Terraform in Kubernetes is a specialized use case with specific benefits and challenges. This authentication method is most appropriate for GitOps workflows, internal developer platforms, or custom Kubernetes operators that use Terraform for infrastructure management.

## How Workload Identity Works

Workload identity federation creates a trust relationship between:
1. A Kubernetes service account
2. A Microsoft Entra ID application

Instead of using long-lived secrets, the Kubernetes service account token is exchanged for an Azure access token through the OIDC protocol. This approach:
- Eliminates the need to manage secrets in Kubernetes
- Reduces the risk of credential leakage
- Aligns with zero trust security principles

## Prerequisites

- A Kubernetes cluster with workload identity configured
  - For AKS: [Configure workload identity on AKS](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview)
  - For other Kubernetes: [Configure Kubernetes federation with Microsoft Entra ID](https://learn.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation-create-trust-kubernetes)
- Permissions to create/modify:
  - Kubernetes service accounts
  - Microsoft Entra ID applications

## Terraform in Kubernetes: Practical Considerations

Before implementing this authentication method, consider these aspects of running Terraform in Kubernetes:

### Valid Use Cases

- **GitOps Workflows**: Using tools like ArgoCD, Flux, or custom controllers to manage infrastructure
- **Internal Developer Platforms**: Self-service infrastructure provisioning for development teams
- **CI/CD Pipelines**: Running Terraform as Kubernetes jobs in your CI/CD pipeline
- **Custom Operators**: Kubernetes operators that provision resources using Terraform

### Implementation Considerations

- **State Management**: Configure persistent storage for Terraform state
- **Concurrency Control**: Implement locking mechanisms to prevent conflicting operations
- **Resource Requirements**: Ensure pods have sufficient CPU and memory resources
- **Security Context**: Run pods with appropriate security contexts and minimal privileges

## Setup

You can set up workload identity federation using either the Azure CLI or Terraform.

### Using Azure CLI

#### 1. Create a Microsoft Entra ID Application

```bash
# Set variables
TENANT_ID="00000000-0000-0000-0000-000000000000"
APP_NAME="terraform-m365-provider"

# Create the app registration
APP_ID=$(az ad app create --display-name $APP_NAME --query appId -o tsv)
APP_OBJECT_ID=$(az ad app show --id $APP_ID --query id -o tsv)

# Create service principal for the application
az ad sp create --id $APP_ID

# Grant API permissions (example for Microsoft Intune)
az ad app permission add \
  --id $APP_ID \
  --api 00000003-0000-0000-c000-000000000000 \
  --api-permissions 9241abd9-d0e6-425a-bd4f-47ba86e767a4=Role

# Grant admin consent
az ad app permission admin-consent --id $APP_ID
```

#### 2. Configure Kubernetes Service Account

```bash
# Create a namespace if it doesn't exist
kubectl create namespace terraform-m365

# Create a service account
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: terraform-m365-sa
  namespace: terraform-m365
  annotations:
    azure.workload.identity/client-id: $APP_ID
EOF

# Create a pod identity binding (for AKS)
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: terraform-runner
  namespace: terraform-m365
  labels:
    azure.workload.identity/use: "true"
spec:
  serviceAccountName: terraform-m365-sa
  containers:
  - name: terraform
    image: hashicorp/terraform:latest
    command:
    - sleep
    - "infinity"
  nodeSelector:
    kubernetes.io/os: linux
EOF
```

#### 3. Configure Federated Identity

```bash
# Set Kubernetes variables
SERVICE_ACCOUNT_NAME="terraform-m365-sa"
SERVICE_ACCOUNT_NAMESPACE="terraform-m365"
SERVICE_ACCOUNT_ISSUER="$(kubectl get --raw /.well-known/openid-configuration | jq -r '.issuer')"

# Configure federated identity
az ad app federated-credential create \
  --id $APP_OBJECT_ID \
  --parameters "{\"name\":\"kubernetes-federated-credential\",\"issuer\":\"$SERVICE_ACCOUNT_ISSUER\",\"subject\":\"system:serviceaccount:$SERVICE_ACCOUNT_NAMESPACE:$SERVICE_ACCOUNT_NAME\",\"description\":\"Kubernetes service account federated credential\",\"audiences\":[\"api://AzureADTokenExchange\"]}"
```

### Using Terraform for Setup

You can also use Terraform to set up the workload identity infrastructure:

```terraform
provider "azurerm" {
  features {}
}

provider "azuread" {}

provider "kubernetes" {
  config_path = "~/.kube/config"  # Adjust based on your Kubernetes configuration
}

# Get Kubernetes cluster information
data "kubernetes_cluster_info" "current" {}

# Extract OIDC issuer URL from the cluster
locals {
  oidc_issuer = data.kubernetes_cluster_info.current.oidc_issuer_url
}

# Create Microsoft Entra ID application
resource "azuread_application" "terraform_m365" {
  display_name = "terraform-m365-provider"
}

# Create service principal
resource "azuread_service_principal" "terraform_m365" {
  application_id = azuread_application.terraform_m365.application_id
}

# Add API permissions for Microsoft Graph
resource "azuread_application_api_permission" "graph_permissions" {
  application_object_id = azuread_application.terraform_m365.object_id
  
  api_id = "00000003-0000-0000-c000-000000000000" # Microsoft Graph API
  
  # Example: DeviceManagementConfiguration.ReadWrite.All
  api_permissions {
    id   = "9241abd9-d0e6-425a-bd4f-47ba86e767a4"
    type = "Role"
  }
}

# Grant admin consent
resource "azuread_application_api_permission_admin_consent" "graph_permissions" {
  application_object_id = azuread_application.terraform_m365.object_id
}

# Create Kubernetes namespace
resource "kubernetes_namespace" "terraform_m365" {
  metadata {
    name = "terraform-m365"
  }
}

# Create Kubernetes service account
resource "kubernetes_service_account" "terraform_m365" {
  metadata {
    name      = "terraform-m365-sa"
    namespace = kubernetes_namespace.terraform_m365.metadata[0].name
    
    annotations = {
      "azure.workload.identity/client-id" = azuread_application.terraform_m365.application_id
    }
  }
}

# Add federated identity credential
resource "azuread_application_federated_identity_credential" "kubernetes" {
  application_object_id = azuread_application.terraform_m365.object_id
  display_name          = "kubernetes-federated-credential"
  description           = "Kubernetes service account federated credential"
  audiences             = ["api://AzureADTokenExchange"]
  issuer                = local.oidc_issuer
  subject               = "system:serviceaccount:${kubernetes_namespace.terraform_m365.metadata[0].name}:${kubernetes_service_account.terraform_m365.metadata[0].name}"
}

# Output important values
output "tenant_id" {
  value = data.azuread_client_config.current.tenant_id
}

output "client_id" {
  value = azuread_application.terraform_m365.application_id
}

output "service_account_name" {
  value = kubernetes_service_account.terraform_m365.metadata[0].name
}

output "namespace" {
  value = kubernetes_namespace.terraform_m365.metadata[0].name
}
```

## Running Terraform in Kubernetes

Here's an example of a Kubernetes job that runs Terraform with workload identity:

```yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: terraform-apply
  namespace: terraform-m365
spec:
  template:
    metadata:
      labels:
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: terraform-m365-sa
      containers:
      - name: terraform
        image: hashicorp/terraform:latest
        command:
        - /bin/sh
        - -c
        - |
          cd /workspace
          terraform init
          terraform apply -auto-approve
        env:
        - name: M365_TENANT_ID
          value: "00000000-0000-0000-0000-000000000000"
        - name: M365_AUTH_METHOD
          value: "workload_identity"
        - name: M365_CLIENT_ID
          value: "00000000-0000-0000-0000-000000000000"
        volumeMounts:
        - name: terraform-code
          mountPath: /workspace
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
      volumes:
      - name: terraform-code
        configMap:
          name: terraform-code
      restartPolicy: Never
  backoffLimit: 2
```

## Microsoft 365 Provider Configuration

### Using Terraform Configuration

```terraform
provider "microsoft365" {
  auth_method = "workload_identity"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id = "00000000-0000-0000-0000-000000000000"
    # Default token file path when using workload identity in Kubernetes
    federated_token_file_path = "/var/run/secrets/azure/tokens/azure-identity-token"
  }
}
```

### Using Environment Variables (Recommended)

```bash
# Set these environment variables before running Terraform
export M365_TENANT_ID="00000000-0000-0000-0000-000000000000"
export M365_AUTH_METHOD="workload_identity"
export M365_CLIENT_ID="00000000-0000-0000-0000-000000000000"
export AZURE_FEDERATED_TOKEN_FILE="/var/run/secrets/azure/tokens/azure-identity-token"
```

Then your Terraform configuration can be simplified:

```terraform
provider "microsoft365" {
  auth_method = "workload_identity"
  # No need to specify credentials as they're read from environment variables
}
```

## Using HashiCorp Vault with Workload Identity

While workload identity eliminates the need for storing client secrets, you may still want to use HashiCorp Vault to manage other sensitive information or provide an additional layer of security.

### 1. Configure Vault to use Kubernetes Authentication

```terraform
# Configure Vault to authenticate with Kubernetes
resource "vault_auth_backend" "kubernetes" {
  type = "kubernetes"
}

resource "vault_kubernetes_auth_backend_config" "config" {
  backend            = vault_auth_backend.kubernetes.path
  kubernetes_host    = "https://kubernetes.default.svc"
  kubernetes_ca_cert = file("/var/run/secrets/kubernetes.io/serviceaccount/ca.crt")
  token_reviewer_jwt = file("/var/run/secrets/kubernetes.io/serviceaccount/token")
}

# Create a role for the Terraform service account
resource "vault_kubernetes_auth_backend_role" "terraform" {
  backend                          = vault_auth_backend.kubernetes.path
  role_name                        = "terraform-role"
  bound_service_account_names      = ["terraform-m365-sa"]
  bound_service_account_namespaces = ["terraform-m365"]
  token_ttl                        = 3600
  token_policies                   = ["terraform-policy"]
}
```

### 2. Store Microsoft 365 Configuration in Vault

```terraform
# Store Microsoft 365 configuration in Vault
resource "vault_kv_secret_v2" "m365_config" {
  mount = "secret"
  name  = "microsoft365/config"
  data_json = jsonencode({
    tenant_id = "00000000-0000-0000-0000-000000000000"
    client_id = "00000000-0000-0000-0000-000000000000"
  })
}
```

### 3. Configure Vault Agent for Injection

```yaml
# Vault Agent configuration for sidecar injection
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terraform-deployment
  namespace: terraform-m365
spec:
  replicas: 1
  selector:
    matchLabels:
      app: terraform
  template:
    metadata:
      labels:
        app: terraform
        azure.workload.identity/use: "true"
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-m365-config: "secret/data/microsoft365/config"
        # Escape the inner delimiters for the outer Go template engine
        vault.hashicorp.com/agent-inject-template-m365-config: |
          {{ `{{- with secret "secret/data/microsoft365/config" -}}` }}
          export M365_TENANT_ID="{{ `{{ .Data.data.tenant_id }}` }}"
          export M365_CLIENT_ID="{{ `{{ .Data.data.client_id }}` }}"
          export M365_AUTH_METHOD="workload_identity"
          {{ `{{- end -}}` }}
        vault.hashicorp.com/role: "terraform-role"
    spec:
      serviceAccountName: terraform-m365-sa
      containers:
      - name: terraform
        image: hashicorp/terraform:latest
        command:
        - /bin/sh
        - -c
        - |
          source /vault/secrets/m365-config
          cd /workspace
          terraform init
          terraform apply -auto-approve
        # ...
```

## Security Considerations

- The service account token file is automatically mounted in pods associated with the configured service account
- The token is short-lived and automatically rotated by Kubernetes
- Configure RBAC in Kubernetes to limit which pods can use the service account
- Configure conditional access policies in Azure to further restrict access
- Consider using HashiCorp Vault for managing other sensitive configuration values
- Enable audit logging for both Kubernetes and Microsoft Entra ID to track authentication events

## Troubleshooting

- **File not found**: Ensure the pod has the correct service account and the token file is mounted correctly
- **Authentication failed**: Verify the federated credential is configured correctly
- **Permission denied**: Ensure you've granted admin consent for the required Microsoft Graph permissions
- **OIDC issuer mismatch**: Verify the OIDC issuer URL in your federated credential configuration matches your Kubernetes cluster's issuer
- **Pod not using workload identity**: Check that the pod has the `azure.workload.identity/use: "true"` label

## Additional Resources

- [Workload identity overview for AKS](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview)
- [Configure workload identity on AKS](https://learn.microsoft.com/en-us/azure/aks/workload-identity-deploy-cluster)
- [Microsoft workload identity for Kubernetes](https://azure.github.io/azure-workload-identity/docs/)
- [HashiCorp Terraform AzureAD Provider documentation](https://registry.terraform.io/providers/hashicorp/azuread/latest/docs)
- [HashiCorp Terraform Kubernetes Provider documentation](https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs)
- [HashiCorp Vault Kubernetes Authentication](https://developer.hashicorp.com/vault/docs/auth/kubernetes)
- [HashiCorp Vault Agent Injection](https://developer.hashicorp.com/vault/docs/platform/k8s/injector)
- [GitOps with Terraform and Kubernetes](https://developer.hashicorp.com/terraform/tutorials/kubernetes/gitops-kubernetes)