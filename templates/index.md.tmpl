---
page_title: "Provider: Microsoft 365"
description: |-
  {{ .Description }}
---

# {{ .RenderedProviderName }} Provider

The community Microsoft 365 provider allows managing environments and other resources within [Microsoft 365](https://www.microsoft.com/en-gb/microsoft-365/products-apps-services).

!> This code is made available as a public preview. Features are being actively developed and may have restricted or limited functionality. Future updates may introduce breaking changes, but we follow [Semantic Versioning](https://semver.org/) to help mitigate this. The software may contain bugs, errors, or other issues that could cause service interruption or data loss. We recommend backing up your data and testing in non-production environments. Your feedback is valuable to us, so please share any issues or suggestions you encounter via GitHub issues.

## Requirements

This provider requires **Terraform >= 0.12**.  For more information on provider installation and constraining provider versions, see the [Provider Requirements documentation](https://developer.hashicorp.com/terraform/language/providers/requirements).

## Installation

To use this provider, add the following to your Terraform configuration:

```terraform
terraform {
  required_providers {
    microsoft365 = {
      source  = "deploymenttheory/microsoft365"
      version = "~> 0.4.0" # Replace with the latest version
    }
  }
}
```

See the official Terraform documentation for more information about [requiring providers](https://developer.hashicorp.com/terraform/language/providers/requirements).

# Authenticating to Microsoft 365

This Terraform provider supports multiple authentication methods for accessing Microsoft 365 services:

* [Authenticating using Client Secret](#authenticating-using-client-secret)
* [Authenticating using Client Certificate](#authenticating-using-client-certificate)
* [Authenticating using Username and Password](#authenticating-using-username-and-password)
* [Authenticating using Device Code](#authenticating-using-device-code)
* [Authenticating using Interactive Browser](#authenticating-using-interactive-browser)

## Authenticating using Client Secret

The Microsoft 365 provider can use a Service Principal with Client Secret to authenticate to Microsoft 365 services.

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
3. Create a client secret in the app registration
4. Configure the provider to use a Service Principal with a Client Secret:

```terraform
provider "microsoft365" {
  auth_method = "client_secret"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id     = "00000000-0000-0000-0000-000000000000"
    client_secret = "your-client-secret"
  }
}
```

## Authenticating using Client Certificate

The Microsoft 365 provider can use certificate-based authentication for enhanced security.

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
3. Generate a certificate using openssl or other tools:

```bash
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365
```

4. Merge public and private parts of the certificate files:

```bash
# Using Linux shell
cat *.pem > cert+key.pem

# Using PowerShell
Get-Content .\cert.pem, .\key.pem | Set-Content cert+key.pem
```

5. Generate pkcs12 file:

```bash
openssl pkcs12 -export -out cert.pkcs12 -in cert+key.pem
```

6. Upload the public certificate (`cert.pem`) to your app registration
7. Configure the provider:

```terraform
provider "microsoft365" {
  auth_method = "client_certificate"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id                    = "00000000-0000-0000-0000-000000000000"
    client_certificate          = "${path.cwd}/cert.pkcs12"
    client_certificate_password = "your-certificate-password"
  }
}
```

## Authenticating using Username and Password

The Microsoft 365 provider can authenticate using standard username and password credentials.

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
3. Configure the provider:

```terraform
provider "microsoft365" {
  auth_method = "username_password"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id = "00000000-0000-0000-0000-000000000000"
    username  = "user@domain.com"
    password  = "your-password"
  }
}
```

## Authenticating using Device Code

The Microsoft 365 provider can use device code authentication when interactive login isn't possible.

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
3. Configure the provider:

```terraform
provider "microsoft365" {
  auth_method = "device_code"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id = "00000000-0000-0000-0000-000000000000"
  }
}
```

## Authenticating using Interactive Browser

The Microsoft 365 provider can authenticate using an interactive browser session.

1. [Create an app registration in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)
2. Add the required API permissions for Microsoft Graph
3. Configure a redirect URI in your app registration
4. Configure the provider:

```terraform
provider "microsoft365" {
  auth_method = "interactive_browser"
  tenant_id   = "00000000-0000-0000-0000-000000000000"
  entra_id_options = {
    client_id     = "00000000-0000-0000-0000-000000000000"
    redirect_url = "http://localhost:8888"
    username     = "user@domain.com"  # Optional login hint
  }
}
```

## Using Environment Variables

We recommend using Environment Variables to pass the credentials to the provider.

| Name | Description |
|------|-------------|
| `M365_TENANT_ID` | The Microsoft Entra ID tenant ID |
| `M365_AUTH_METHOD` | The authentication method to use |
| `M365_CLIENT_ID` | The application (client) ID |
| `M365_CLIENT_SECRET` | The client secret value |
| `M365_CLIENT_CERTIFICATE_FILE_PATH` | Path to the certificate file |
| `M365_CLIENT_CERTIFICATE_PASSWORD` | Password for the certificate |
| `M365_USERNAME` | Username for password or browser authentication |
| `M365_PASSWORD` | Password for password authentication |
| `M365_REDIRECT_URI` | Redirect URI for interactive browser authentication |
| `M365_CLOUD` | Cloud environment (defaults to global) |
| `M365_DISABLE_INSTANCE_DISCOVERY` | Disable instance discovery |
| `M365_ADDITIONALLY_ALLOWED_TENANTS` | List of additionally allowed tenant IDs |

-> Variables passed into the provider block will override the environment variables.

## Additional Provider Configuration

The provider supports additional configuration options for client behavior, telemetry, and debugging:

```terraform
provider "microsoft365" {
  # ... authentication configuration ...
  
  debug_mode = false             # ENV: M365_DEBUG_MODE
  telemetry_optout = false       # ENV: M365_TELEMETRY_OPTOUT
  
  client_options = {
    # ... client configuration options ...
  }
}
```

For a complete list of client options, refer to the provider documentation.

> **Security Note**: Store sensitive values like client secrets, certificates, and passwords using environment variables or Terraform's encrypted state management features. Never commit these values directly in your configuration files.

## Example Usage

{{ tffile "examples/microsoft365_provider/provider.tf" }}

{{ .SchemaMarkdown | trimspace }}


# Resources and Data Sources

Use the navigation to the left to read about the available resources and data sources.

!> By calling `terraform destroy` all the resources that you've created will be permanently deleted. Please be careful with this command when working with production environments. You can use [prevent-destroy](https://developer.hashicorp.com/terraform/language/meta-arguments/lifecycle#prevent_destroy) lifecycle argument in your resources to prevent accidental deletion.  

## Examples

You can find practical examples of using this provider in our examples directory. These examples demonstrate:
- Basic resource management
- Complex configurations
- Integration with Microsoft Graph API
- Best practices for production deployments

For more examples and use cases, visit our [Microsoft 365 Provider Examples](https://github.com/deploymenttheory/terraform-provider-microsoft365/tree/main/examples) directory.

## Releases

A full list of released versions of the Microsoft 365 Terraform Provider can be found in our [GitHub Releases](https://github.com/deploymenttheory/terraform-provider-microsoft365/releases).

Starting from the initial release, changes to the provider in each version are documented in our [CHANGELOG.md](https://github.com/deploymenttheory/terraform-provider-microsoft365/blob/main/CHANGELOG.md). This provider follows Semantic Versioning for releases, where the version number (MAJOR.MINOR.PATCH) indicates:

- MAJOR version for incompatible API changes
- MINOR version for functionality added in a backwards compatible manner
- PATCH version for backwards compatible bug fixes

## Contributing

We welcome contributions to the Microsoft 365 Provider! Whether it's:
- Bug reports and fixes
- Feature requests and implementations
- Documentation improvements
- Example contributions

Please visit our [GitHub repository](https://github.com/deploymenttheory/terraform-provider-microsoft365) to:
- Open issues
- Submit pull requests
- View contribution guidelines
- Join the community discussions

The provider leverages the Microsoft Graph API through the Kiota-generated SDKs, making it a powerful tool for managing Microsoft 365 resources through Terraform.