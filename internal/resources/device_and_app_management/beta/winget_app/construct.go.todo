package graphBetaWinGetApp

import (
	"context"

	"github.com/hashicorp/terraform-plugin-log/tflog"
	models "github.com/microsoftgraph/msgraph-beta-sdk-go/models"
)

func constructResource(ctx context.Context, data *WinGetAppResourceModel) (models.WinGetAppable, error) {
	tflog.Debug(ctx, "Constructing WinGetApp resource")

	winGetApp := models.NewWinGetApp()

	if !data.DisplayName.IsNull() && !data.DisplayName.IsUnknown() {
		winGetApp.SetDisplayName(data.DisplayName.ValueString())
	}

	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		winGetApp.SetDescription(data.Description.ValueString())
	}

	if !data.Publisher.IsNull() && !data.Publisher.IsUnknown() {
		winGetApp.SetPublisher(data.Publisher.ValueString())
	}

	if data.LargeIcon != nil && !data.LargeIcon.Type.IsNull() && !data.LargeIcon.Value.IsNull() {
		mimeContent := models.NewMimeContent()
		mimeContent.SetType(data.LargeIcon.Type.ValueString())
		mimeContent.SetValue([]byte(data.LargeIcon.Value.ValueString()))
		winGetApp.SetLargeIcon(mimeContent)
	}

	if !data.IsFeatured.IsNull() && !data.IsFeatured.IsUnknown() {
		winGetApp.SetIsFeatured(data.IsFeatured.ValueBool())
	}

	if !data.PrivacyInformationUrl.IsNull() && !data.PrivacyInformationUrl.IsUnknown() {
		winGetApp.SetPrivacyInformationUrl(data.PrivacyInformationUrl.ValueString())
	}

	if !data.InformationUrl.IsNull() && !data.InformationUrl.IsUnknown() {
		winGetApp.SetInformationUrl(data.InformationUrl.ValueString())
	}

	if !data.Owner.IsNull() && !data.Owner.IsUnknown() {
		winGetApp.SetOwner(data.Owner.ValueString())
	}

	if !data.Developer.IsNull() && !data.Developer.IsUnknown() {
		winGetApp.SetDeveloper(data.Developer.ValueString())
	}

	if !data.Notes.IsNull() && !data.Notes.IsUnknown() {
		winGetApp.SetNotes(data.Notes.ValueString())
	}

	if !data.PackageIdentifier.IsNull() && !data.PackageIdentifier.IsUnknown() {
		winGetApp.SetPackageIdentifier(data.PackageIdentifier.ValueString())
	}

	if data.RoleScopeTagIds != nil {
		var roleScopeTagIds []string
		data.RoleScopeTagIds.ElementsAs(ctx, &roleScopeTagIds, false)
		winGetApp.SetRoleScopeTagIds(roleScopeTagIds)
	}

	if data.InstallExperience != nil && !data.InstallExperience.RunAsAccount.IsNull() {
		installExperience := models.NewWinGetAppInstallExperience()
		runAsAccount := models.RunAsAccountType(data.InstallExperience.RunAsAccount.ValueString())
		installExperience.SetRunAsAccount(&runAsAccount)
		winGetApp.SetInstallExperience(installExperience)
	}

	return winGetApp, nil
}
