package graphBetaWindowsRemediationScript

import (
	"context"
	"fmt"
)

// ValidateAssignmentConfiguration validates the assignment configuration
// - No group is used more than once across include and exclude assignments
// - AllDevices and IncludeGroups cannot be used at the same time
// - AllUsers and IncludeGroups cannot be used at the same time
// - Filters can be used with all_devices, all_users, and include targets, but not with exclude targets
func validateAssignmentConfig(assignments []AssignmentResourceModel) error {
	if len(assignments) == 0 {
		return nil
	}

	// Track specific assignment types to validate rules
	hasAllDevices := false
	hasAllUsers := false
	hasIncludeGroups := false

	// Track all group IDs to prevent duplicates
	uniqueGroupIDs := make(map[string]bool)

	for i, assignment := range assignments {
		switch assignment.Target.ValueString() {
		case "all_devices":
			if hasAllDevices {
				return fmt.Errorf("assignment at index %d: only one 'all_devices' assignment is allowed", i)
			}
			hasAllDevices = true

			// Validate filter if specified
			if !assignment.FilterId.IsNull() {
				if !assignment.FilterType.IsNull() {
					filterType := assignment.FilterType.ValueString()
					if filterType != "include" && filterType != "exclude" {
						return fmt.Errorf("assignment at index %d: filter_type must be either 'include' or 'exclude', got: %s", i, filterType)
					}
				}
			}

		case "all_users":
			if hasAllUsers {
				return fmt.Errorf("assignment at index %d: only one 'all_users' assignment is allowed", i)
			}
			hasAllUsers = true

			// Validate filter if specified
			if !assignment.FilterId.IsNull() {
				if !assignment.FilterType.IsNull() {
					filterType := assignment.FilterType.ValueString()
					if filterType != "include" && filterType != "exclude" {
						return fmt.Errorf("assignment at index %d: filter_type must be either 'include' or 'exclude', got: %s", i, filterType)
					}
				}
			}

		case "include":
			hasIncludeGroups = true

			// Validate that group_ids is provided
			if assignment.GroupIds.IsNull() {
				return fmt.Errorf("assignment at index %d: group_ids is required for 'include' target", i)
			}

			// Validate include groups
			var groupIds []string
			diags := assignment.GroupIds.ElementsAs(context.Background(), &groupIds, false)
			if diags.HasError() {
				return fmt.Errorf("assignment at index %d: failed to validate include group IDs: %v", i, diags.Errors())
			}

			if len(groupIds) == 0 {
				return fmt.Errorf("assignment at index %d: at least one group ID is required for 'include' target", i)
			}

			for _, groupId := range groupIds {
				if uniqueGroupIDs[groupId] {
					return fmt.Errorf("assignment at index %d: group ID %s is used more than once across assignments", i, groupId)
				}
				uniqueGroupIDs[groupId] = true
			}

			// Validate filter if specified
			if !assignment.FilterId.IsNull() {
				if !assignment.FilterType.IsNull() {
					filterType := assignment.FilterType.ValueString()
					if filterType != "include" && filterType != "exclude" {
						return fmt.Errorf("assignment at index %d: filter_type must be either 'include' or 'exclude', got: %s", i, filterType)
					}
				}
			}

		case "exclude":
			// Validate that group_ids is provided
			if assignment.GroupIds.IsNull() {
				return fmt.Errorf("assignment at index %d: group_ids is required for 'exclude' target", i)
			}

			// Validate exclude groups
			var groupIds []string
			diags := assignment.GroupIds.ElementsAs(context.Background(), &groupIds, false)
			if diags.HasError() {
				return fmt.Errorf("assignment at index %d: failed to validate exclude group IDs: %v", i, diags.Errors())
			}

			if len(groupIds) == 0 {
				return fmt.Errorf("assignment at index %d: at least one group ID is required for 'exclude' target", i)
			}

			for _, groupId := range groupIds {
				if uniqueGroupIDs[groupId] {
					return fmt.Errorf("assignment at index %d: group ID %s is used more than once across assignments", i, groupId)
				}
				uniqueGroupIDs[groupId] = true
			}

			// Filters are not supported for exclude groups
			if !assignment.FilterId.IsNull() {
				return fmt.Errorf("assignment at index %d: filters are not supported for exclude group assignments", i)
			}

		default:
			return fmt.Errorf("assignment at index %d: unsupported assignment target type: %s", i, assignment.Target.ValueString())
		}
	}

	// Validate mutually exclusive rules
	if hasAllDevices && hasIncludeGroups {
		return fmt.Errorf("cannot assign to all devices and include groups at the same time")
	}

	if hasAllUsers && hasIncludeGroups {
		return fmt.Errorf("cannot assign to all users and include groups at the same time")
	}

	return nil
}
