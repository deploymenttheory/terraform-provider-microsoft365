package graphBetaConditionalAccessPolicy

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/client/graphcustom"
	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/constants"
	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/services/common/crud"
	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/services/common/errors"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Create handles the Create operation.
// NOTE: Using custom HTTP requests because the beta SDK doesn't currently
// include the Policies() method in ConditionalAccessRequestBuilder
func (r *ConditionalAccessPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var object ConditionalAccessPolicyResourceModel

	tflog.Debug(ctx, fmt.Sprintf("Starting creation of resource: %s", ResourceName))

	resp.Diagnostics.Append(req.Plan.Get(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx, cancel := crud.HandleTimeout(ctx, object.Timeouts.Create, CreateTimeout*time.Second, &resp.Diagnostics)
	if cancel == nil {
		return
	}
	defer cancel()

	requestBody, err := constructResource(ctx, &object)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error constructing resource",
			fmt.Sprintf("Could not construct resource: %s: %s", ResourceName, err.Error()),
		)
		return
	}

	// Use custom POST request since SDK doesn't have Policies() method yet
	config := graphcustom.PostRequestConfig{
		APIVersion:  graphcustom.GraphAPIBeta,
		Endpoint:    "identity/conditionalAccess/policies",
		RequestBody: requestBody,
	}

	responseData, err := graphcustom.PostRequest(
		ctx,
		r.client.GetAdapter(),
		config,
		nil,
		nil,
	)

	if err != nil {
		errors.HandleGraphError(ctx, err, resp, "Create", r.WritePermissions)
		return
	}

	if responseData == nil {
		resp.Diagnostics.AddError(
			"Unexpected response",
			"The create request returned a nil response",
		)
		return
	}

	// Extract ID from the response data
	responseObj, ok := responseData.(map[string]interface{})
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected response format",
			"The response could not be converted to expected format",
		)
		return
	}

	if id, ok := responseObj["id"].(string); ok {
		object.ID = types.StringValue(id)
	} else {
		resp.Diagnostics.AddError(
			"Missing ID in response",
			"The ID field was not found in the response",
		)
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	readReq := resource.ReadRequest{State: resp.State, ProviderMeta: req.ProviderMeta}
	stateContainer := &crud.CreateResponseContainer{CreateResponse: resp}

	opts := crud.DefaultReadWithRetryOptions()
	opts.Operation = "Create"
	opts.ResourceTypeName = constants.PROVIDER_NAME + "_" + ResourceName

	err = crud.ReadWithRetry(ctx, r.Read, readReq, stateContainer, opts)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error reading resource state after create",
			fmt.Sprintf("Could not read resource state: %s: %s", ResourceName, err.Error()),
		)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Finished Create Method: %s", ResourceName))
}

// Read handles the Read operation for conditional access policy resources.
func (r *ConditionalAccessPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var object ConditionalAccessPolicyResourceModel

	tflog.Debug(ctx, fmt.Sprintf("Starting Read method for: %s", ResourceName))

	resp.Diagnostics.Append(req.State.Get(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Reading %s with ID: %s", ResourceName, object.ID.ValueString()))

	ctx, cancel := crud.HandleTimeout(ctx, object.Timeouts.Read, ReadTimeout*time.Second, &resp.Diagnostics)
	if cancel == nil {
		return
	}
	defer cancel()

	// Use custom GET request since SDK doesn't have Policies() method yet
	config := graphcustom.GetRequestConfig{
		APIVersion: graphcustom.GraphAPIBeta,
		Endpoint:   fmt.Sprintf("identity/conditionalAccess/policies/%s", object.ID.ValueString()),
	}

	result, err := graphcustom.GetRequestByResourceId(
		ctx,
		r.client.GetAdapter(),
		config,
	)

	if err != nil {
		errors.HandleGraphError(ctx, err, resp, "Read", r.ReadPermissions)
		return
	}

	// Parse the JSON response
	var jsonData map[string]interface{}
	err = json.Unmarshal(result, &jsonData)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error parsing response",
			fmt.Sprintf("Could not parse response: %s", err.Error()),
		)
		return
	}

	// Map the data to the model
	MapRemoteResourceStateToTerraform(ctx, &object, jsonData)

	resp.Diagnostics.Append(resp.State.Set(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Finished Read Method: %s", ResourceName))
}

// Update handles the Update operation for conditional access policy resources.
func (r *ConditionalAccessPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var object ConditionalAccessPolicyResourceModel

	tflog.Debug(ctx, fmt.Sprintf("Starting Update of resource: %s", ResourceName))

	resp.Diagnostics.Append(req.State.Get(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx, cancel := crud.HandleTimeout(ctx, object.Timeouts.Update, UpdateTimeout*time.Second, &resp.Diagnostics)
	if cancel == nil {
		return
	}
	defer cancel()

	requestBody, err := constructResource(ctx, &object)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error constructing resource",
			fmt.Sprintf("Could not construct resource: %s: %s", ResourceName, err.Error()),
		)
		return
	}

	// Use custom PATCH request since SDK doesn't have Policies() method yet
	config := graphcustom.PatchRequestConfig{
		APIVersion:  graphcustom.GraphAPIBeta,
		Endpoint:    fmt.Sprintf("identity/conditionalAccess/policies/%s", object.ID.ValueString()),
		RequestBody: requestBody,
	}

	err = graphcustom.PatchRequestNoContent(
		ctx,
		r.client.GetAdapter(),
		config,
	)

	if err != nil {
		errors.HandleGraphError(ctx, err, resp, "Update", r.WritePermissions)
		return
	}

	readReq := resource.ReadRequest{State: resp.State, ProviderMeta: req.ProviderMeta}
	stateContainer := &crud.UpdateResponseContainer{UpdateResponse: resp}

	opts := crud.DefaultReadWithRetryOptions()
	opts.Operation = "Update"
	opts.ResourceTypeName = constants.PROVIDER_NAME + "_" + ResourceName

	err = crud.ReadWithRetry(ctx, r.Read, readReq, stateContainer, opts)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error reading resource state after update",
			fmt.Sprintf("Could not read resource state: %s: %s", ResourceName, err.Error()),
		)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Finished Update Method: %s", ResourceName))
}

// Delete handles the Delete operation for conditional access policy resources.
func (r *ConditionalAccessPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var object ConditionalAccessPolicyResourceModel

	tflog.Debug(ctx, fmt.Sprintf("Starting deletion of resource: %s", ResourceName))

	resp.Diagnostics.Append(req.State.Get(ctx, &object)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx, cancel := crud.HandleTimeout(ctx, object.Timeouts.Delete, DeleteTimeout*time.Second, &resp.Diagnostics)
	if cancel == nil {
		return
	}
	defer cancel()

	// Use custom DELETE request since SDK doesn't have Policies() method yet
	config := graphcustom.DeleteRequestConfig{
		APIVersion: graphcustom.GraphAPIBeta,
		Endpoint:   fmt.Sprintf("identity/conditionalAccess/policies/%s", object.ID.ValueString()),
	}

	err := graphcustom.DeleteRequestNoContent(
		ctx,
		r.client.GetAdapter(),
		config,
	)

	if err != nil {
		errors.HandleGraphError(ctx, err, resp, "Delete", r.WritePermissions)
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Finished Delete Method: %s", ResourceName))

	resp.State.RemoveResource(ctx)
}
