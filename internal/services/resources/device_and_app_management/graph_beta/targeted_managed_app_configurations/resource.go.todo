package graphBetaTargetedManagedAppConfigurations

import (
	"context"

	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/client"
	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/constants"
	planmodifiers "github.com/deploymenttheory/terraform-provider-microsoft365/internal/services/common/plan_modifiers"
	commonschema "github.com/deploymenttheory/terraform-provider-microsoft365/internal/services/common/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	msgraphbetasdk "github.com/microsoftgraph/msgraph-beta-sdk-go"
)

const (
	ResourceName  = "graph_beta_device_and_app_management_targeted_managed_app_configuration"
	CreateTimeout = 180
	UpdateTimeout = 180
	ReadTimeout   = 180
	DeleteTimeout = 180
)

var (
	// Basic resource interface (CRUD operations)
	_ resource.Resource = &targetedManagedAppConfigurationResource{}

	// Allows the resource to be configured with the provider client
	_ resource.ResourceWithConfigure = &targetedManagedAppConfigurationResource{}

	// Enables import functionality
	_ resource.ResourceWithImportState = &targetedManagedAppConfigurationResource{}

	// Enables plan modification/diff suppression
	_ resource.ResourceWithModifyPlan = &targetedManagedAppConfigurationResource{}
)

// NewTargetedManagedAppConfigurationResource creates a new instance of the resource.
func NewTargetedManagedAppConfigurationResource() resource.Resource {
	return &targetedManagedAppConfigurationResource{
		ReadPermissions: []string{
			"DeviceManagementApps.Read.All",
			"DeviceManagementConfiguration.Read.All",
		},
		WritePermissions: []string{
			"DeviceManagementApps.ReadWrite.All",
			"DeviceManagementConfiguration.ReadWrite.All",
		},
		ResourcePath: "/deviceAppManagement/targetedManagedAppConfigurations",
	}
}

// targetedManagedAppConfigurationResource is the resource implementation.
type targetedManagedAppConfigurationResource struct {
	client           *msgraphbetasdk.GraphServiceClient
	ProviderTypeName string
	TypeName         string
	ReadPermissions  []string
	WritePermissions []string
	ResourcePath     string
}

// Metadata returns the resource type name.
func (r *targetedManagedAppConfigurationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	r.ProviderTypeName = req.ProviderTypeName
	r.TypeName = ResourceName
	resp.TypeName = r.FullTypeName()
}

// FullTypeName returns the full resource type name in the format "providername_resourcename".
func (r *targetedManagedAppConfigurationResource) FullTypeName() string {
	return r.ProviderTypeName + "_" + r.TypeName
}

// Configure adds the provider configured client to the resource.
func (r *targetedManagedAppConfigurationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	r.client = client.SetGraphBetaClientForResource(ctx, req, resp, constants.PROVIDER_NAME+"_"+ResourceName)
}

// ImportState imports an existing resource by ID.
func (r *targetedManagedAppConfigurationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}

// Schema defines the schema for the resource.
func (r *targetedManagedAppConfigurationResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manages targeted managed app configurations in Microsoft Intune using the /deviceAppManagement/targetedManagedAppConfigurations endpoint.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The unique identifier for the targeted managed app configuration.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					planmodifiers.UseStateForUnknownString(),
				},
			},
			"display_name": schema.StringAttribute{
				MarkdownDescription: "The display name of the targeted managed app configuration.",
				Required:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "The description of the targeted managed app configuration.",
				Optional:            true,
			},
			"created_date_time": schema.StringAttribute{
				MarkdownDescription: "The date and time when the targeted managed app configuration was created.",
				Computed:            true,
			},
			"last_modified_date_time": schema.StringAttribute{
				MarkdownDescription: "The date and time when the targeted managed app configuration was last modified.",
				Computed:            true,
			},
			"version": schema.StringAttribute{
				MarkdownDescription: "Version of the entity.",
				Computed:            true,
			},
			"role_scope_tag_ids": schema.SetAttribute{
				MarkdownDescription: "List of scope tag IDs for this entity.",
				ElementType:         types.StringType,
				Optional:            true,
			},
			"app_group_type": schema.StringAttribute{
				MarkdownDescription: "Indicates a collection of apps to target which can be one of several pre-defined lists of apps or a manually selected list of apps. Possible values include: 'selectedPublicApps', 'allCoreMicrosoftApps', 'allMicrosoftApps', 'allApps'.",
				Optional:            true,
			},
			"deployed_app_count": schema.Int64Attribute{
				MarkdownDescription: "Count of apps to which the current policy is deployed.",
				Computed:            true,
			},
			"is_assigned": schema.BoolAttribute{
				MarkdownDescription: "Indicates if the policy is deployed to any inclusion groups or not.",
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"targeted_app_management_levels": schema.StringAttribute{
				MarkdownDescription: "Management levels for apps. Possible values include: 'unspecified', 'unmanaged', 'mdm', 'androidEnterprise', 'iosEnterprise'.",
				Optional:            true,
			},
			"timeouts": commonschema.Timeouts(ctx),
		},
		Blocks: map[string]schema.Block{
			"custom_settings": schema.ListNestedBlock{
				MarkdownDescription: "A set of string key and string value pairs to be sent to apps for users to whom the configuration is scoped, unaltered by this service.",
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Name for this key-value pair.",
							Required:            true,
						},
						"value": schema.StringAttribute{
							MarkdownDescription: "Value for this key-value pair.",
							Required:            true,
						},
					},
				},
			},
			"settings": schema.ListNestedBlock{
				MarkdownDescription: "List of settings contained in this App Configuration policy.",
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"setting_instance": schema.SingleNestedBlock{
							MarkdownDescription: "Setting instance within policy.",
							Attributes: map[string]schema.Attribute{
								"setting_definition_id": schema.StringAttribute{
									MarkdownDescription: "Setting definition ID.",
									Required:            true,
								},
							},
							Blocks: map[string]schema.Block{
								"choice_setting_value": schema.SingleNestedBlock{
									MarkdownDescription: "Choice setting value.",
									Attributes: map[string]schema.Attribute{
										"value": schema.StringAttribute{
											MarkdownDescription: "Choice setting value.",
											Required:            true,
										},
									},
									Blocks: map[string]schema.Block{
										"children": schema.ListNestedBlock{
											MarkdownDescription: "Child settings.",
											NestedObject:        schema.NestedBlockObject{},
										},
									},
								},
								"simple_setting_value": schema.SingleNestedBlock{
									MarkdownDescription: "Simple setting value.",
									Attributes: map[string]schema.Attribute{
										"value": schema.StringAttribute{
											MarkdownDescription: "Simple setting value.",
											Required:            true,
										},
									},
								},
							},
						},
					},
				},
			},
			"apps": schema.ListNestedBlock{
				MarkdownDescription: "List of apps to which the policy is deployed.",
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"mobile_app_identifier": schema.SingleNestedBlock{
							MarkdownDescription: "The identifier for an app with its operating system type.",
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									MarkdownDescription: "The type of mobile app identifier. Possible values include: 'androidMobileAppIdentifier', 'iosMobileAppIdentifier', 'windowsAppIdentifier'.",
									Required:            true,
								},
								"bundle_id": schema.StringAttribute{
									MarkdownDescription: "The iOS app bundle ID.",
									Optional:            true,
								},
								"package_id": schema.StringAttribute{
									MarkdownDescription: "The Android app package ID.",
									Optional:            true,
								},
								"windows_app_id": schema.StringAttribute{
									MarkdownDescription: "The Windows app ID.",
									Optional:            true,
								},
							},
						},
					},
					Attributes: map[string]schema.Attribute{
						"version": schema.StringAttribute{
							MarkdownDescription: "Version of the entity.",
							Optional:            true,
						},
					},
				},
			},
			"assignments": schema.ListNestedBlock{
				MarkdownDescription: "Navigation property to list of inclusion and exclusion groups to which the policy is deployed.",
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"source": schema.StringAttribute{
							MarkdownDescription: "Represents source of assignment.",
							Optional:            true,
						},
						"source_id": schema.StringAttribute{
							MarkdownDescription: "Identifier for resource used for deployment to a group.",
							Optional:            true,
						},
					},
					Blocks: map[string]schema.Block{
						"target": schema.SingleNestedBlock{
							MarkdownDescription: "Identifier for deployment to a group or app.",
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									MarkdownDescription: "The type of target. Possible values include: 'groupAssignmentTarget', 'allLicensedUsersAssignmentTarget', 'allDevicesAssignmentTarget'.",
									Required:            true,
								},
								"device_and_app_management_assignment_filter_id": schema.StringAttribute{
									MarkdownDescription: "The ID of the filter for the target assignment.",
									Optional:            true,
								},
								"device_and_app_management_assignment_filter_type": schema.StringAttribute{
									MarkdownDescription: "Represents type of the assignment filter. Possible values include: 'none', 'include', 'exclude'.",
									Optional:            true,
								},
								"group_id": schema.StringAttribute{
									MarkdownDescription: "The group ID that is the target of the assignment.",
									Optional:            true,
								},
							},
						},
					},
				},
			},
		},
	}
}
