package graphBetaTargetedManagedAppConfigurations

import (
	"context"
	"fmt"

	"github.com/deploymenttheory/terraform-provider-microsoft365/internal/services/common/convert"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	graphmodels "github.com/microsoftgraph/msgraph-beta-sdk-go/models"
)

// Helper functions

// constructResource builds the Graph API request body from the Terraform resource model
func constructResource(ctx context.Context, plan *TargetedManagedAppConfigurationResourceModel, diags *diag.Diagnostics) (graphmodels.TargetedManagedAppConfigurationable, error) {
	requestBody := graphmodels.NewTargetedManagedAppConfiguration()

	// Set basic properties
	convert.SetStringProperty(requestBody.SetDisplayName, plan.DisplayName)
	convert.SetStringProperty(requestBody.SetDescription, plan.Description)

	// Set role scope tag IDs
	if !plan.RoleScopeTagIds.IsNull() && !plan.RoleScopeTagIds.IsUnknown() {
		var roleScopeTagIds []string
		diagsResult := plan.RoleScopeTagIds.ElementsAs(ctx, &roleScopeTagIds, false)
		if diagsResult.HasError() {
			diags.Append(diagsResult...)
			return nil, fmt.Errorf("failed to parse role scope tag IDs")
		}
		requestBody.SetRoleScopeTagIds(roleScopeTagIds)
	}

	// Set app group type
	if !plan.AppGroupType.IsNull() && !plan.AppGroupType.IsUnknown() {
		appGroupType, err := convert.SetEnumProperty(plan.AppGroupType.ValueString(), graphmodels.ParseTargetedManagedAppGroupType)
		if err != nil {
			diags.AddError(
				"Error setting app group type",
				fmt.Sprintf("Error setting app group type: %s", err),
			)
			return nil, err
		}
		requestBody.SetAppGroupType(appGroupType)
	}

	// Set targeted app management levels
	if !plan.TargetedAppManagementLevels.IsNull() && !plan.TargetedAppManagementLevels.IsUnknown() {
		targetedAppManagementLevels, err := convert.SetEnumProperty(plan.TargetedAppManagementLevels.ValueString(), graphmodels.ParseAppManagementLevel)
		if err != nil {
			diags.AddError(
				"Error setting targeted app management levels",
				fmt.Sprintf("Error setting targeted app management levels: %s", err),
			)
			return nil, err
		}
		requestBody.SetTargetedAppManagementLevels(targetedAppManagementLevels)
	}

	// Set custom settings
	if len(plan.CustomSettings) > 0 {
		customSettings := make([]graphmodels.KeyValuePairable, 0, len(plan.CustomSettings))
		for _, setting := range plan.CustomSettings {
			keyValuePair := graphmodels.NewKeyValuePair()
			convert.SetStringProperty(keyValuePair.SetName, setting.Name)
			convert.SetStringProperty(keyValuePair.SetValue, setting.Value)
			customSettings = append(customSettings, keyValuePair)
		}
		requestBody.SetCustomSettings(customSettings)
	}

	// Set settings
	if len(plan.Settings) > 0 {
		settings := make([]graphmodels.DeviceManagementConfigurationSettingable, 0, len(plan.Settings))
		for _, setting := range plan.Settings {
			if setting.SettingInstance == nil {
				continue
			}

			deviceManagementConfigurationSetting := graphmodels.NewDeviceManagementConfigurationSetting()
			settingInstance := constructSettingInstance(setting.SettingInstance, diags)
			if diags.HasError() {
				return nil, fmt.Errorf("failed to construct setting instance")
			}

			deviceManagementConfigurationSetting.SetSettingInstance(settingInstance)
			settings = append(settings, deviceManagementConfigurationSetting)
		}
		requestBody.SetSettings(settings)
	}

	// Set apps
	if len(plan.Apps) > 0 {
		apps := make([]graphmodels.ManagedMobileAppable, 0, len(plan.Apps))
		for _, app := range plan.Apps {
			if app.MobileAppIdentifier == nil {
				continue
			}

			managedMobileApp := graphmodels.NewManagedMobileApp()
			mobileAppIdentifier := constructMobileAppIdentifier(app.MobileAppIdentifier, diags)
			if diags.HasError() {
				return nil, fmt.Errorf("failed to construct mobile app identifier")
			}

			managedMobileApp.SetMobileAppIdentifier(mobileAppIdentifier)
			if !app.Version.IsNull() && !app.Version.IsUnknown() {
				convert.SetStringProperty(managedMobileApp.SetVersion, app.Version)
			}
			apps = append(apps, managedMobileApp)
		}
		requestBody.SetApps(apps)
	}

	// Set assignments
	if len(plan.Assignments) > 0 {
		assignments := make([]graphmodels.TargetedManagedAppPolicyAssignmentable, 0, len(plan.Assignments))
		for _, assignment := range plan.Assignments {
			targetedManagedAppPolicyAssignment := graphmodels.NewTargetedManagedAppPolicyAssignment()

			if !assignment.Source.IsNull() && !assignment.Source.IsUnknown() {
				convert.SetStringProperty(targetedManagedAppPolicyAssignment.SetSource, assignment.Source)
			}

			if !assignment.SourceId.IsNull() && !assignment.SourceId.IsUnknown() {
				convert.SetStringProperty(targetedManagedAppPolicyAssignment.SetSourceId, assignment.SourceId)
			}

			if assignment.Target != nil {
				target := constructAssignmentTarget(assignment.Target, diags)
				if diags.HasError() {
					return nil, fmt.Errorf("failed to construct assignment target")
				}
				targetedManagedAppPolicyAssignment.SetTarget(target)
			}

			assignments = append(assignments, targetedManagedAppPolicyAssignment)
		}
		requestBody.SetAssignments(assignments)
	}

	return requestBody, nil
}
