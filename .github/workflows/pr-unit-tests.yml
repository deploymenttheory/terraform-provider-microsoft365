name: PR Unit Tests

permissions:
  contents: read

on:
  pull_request:
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  test:
    name: 'üß™ Run Go Unit Tests'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 120
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          
      - name: Check Out  
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: .go-version
          cache: true

      - name: Install dependencies
        run: go mod download

      # Step 1: Identify all changed packages
      - name: Identify changed packages
        id: changed-packages
        run: |
          # Get list of changed .go files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(go)$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Go files changed"
            echo "packages=" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed Go files:"
          echo "$CHANGED_FILES"
          
          # Extract unique package directories from changed files
          ALL_PACKAGES=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u)
          
          echo "All changed packages:"
          echo "$ALL_PACKAGES"
          
          # Convert to space-separated list for output
          PACKAGES_LIST=$(echo "$ALL_PACKAGES" | tr '\n' ' ' | sed 's/ $//')
          
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$PACKAGES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT

      # Step 2: Check if tests exist for all changed packages (excluding certain directories)
      - name: Check test coverage for changed packages
        id: check-test-coverage
        if: steps.changed-packages.outputs.has-changes == 'true'
        run: |
          PACKAGES="${{ steps.changed-packages.outputs.packages }}"
          
          if [ -z "$PACKAGES" ]; then
            echo "No packages to check"
            exit 0
          fi
          
          MISSING_TESTS=false
          PACKAGES_WITH_TESTS=""
          
          for pkg in $PACKAGES; do
            # Skip directories that don't require tests
            if [[ "$pkg" == *"/mocks" ]]; then
              echo "Skipping test requirement check for mocks directory: $pkg"
              continue
            elif [[ "$pkg" == *"/schema/"* ]]; then
              echo "Skipping test requirement check for schema directory: $pkg"
              continue
            elif [[ "$pkg" == *"/shared_models/"* ]]; then
              echo "Skipping test requirement check for shared_models directory: $pkg"
              continue
            elif [[ "$pkg" == *"internal/acceptance"* ]]; then
              echo "Skipping test requirement check for acceptance directory: $pkg"
              continue
            fi
            
            # Check if package has test files
            TEST_COUNT=$(find "$pkg" -maxdepth 1 -name "*_test.go" 2>/dev/null | wc -l)
            
            if [ "$TEST_COUNT" -gt 0 ]; then
              echo "‚úÖ Found $TEST_COUNT test files in $pkg"
              PACKAGES_WITH_TESTS="$PACKAGES_WITH_TESTS ./$pkg"
            else
              echo "‚ùå No test files found in $pkg"
              MISSING_TESTS=true
            fi
          done
          
          # Step 3: If tests don't exist for required packages, throw an error
          if [ "$MISSING_TESTS" = true ]; then
            echo ""
            echo "ERROR: Some packages with Go code changes are missing tests"
            echo "All Go code changes must include tests (except mocks, schema, shared_models, and common directories)"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ All changed packages have appropriate test coverage"
          
          # Save packages with tests for the next step
          echo "packages-with-tests<<EOF" >> $GITHUB_OUTPUT
          echo "$PACKAGES_WITH_TESTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 4: If tests exist, run the unit tests
      - name: Run unit tests for changed packages
        if: steps.changed-packages.outputs.has-changes == 'true'
        run: |
          PACKAGES_WITH_TESTS="${{ steps.check-test-coverage.outputs.packages-with-tests }}"
          
          if [ -z "$PACKAGES_WITH_TESTS" ]; then
            echo "No packages with tests to run"
            exit 0
          fi
          
          echo "Running unit tests for packages with tests..."
          go mod tidy
          go mod download
          
          echo "Testing packages: $PACKAGES_WITH_TESTS"
          
          # Step 5: Run unit tests (any test failures will cause the workflow to fail)
          echo "$PACKAGES_WITH_TESTS" | xargs -I {} sh -c 'echo "Testing package: {}" && TF_ACC=0 go test -v -race {}'

      - name: Skip - No Go changes
        if: steps.changed-packages.outputs.has-changes == 'false'
        run: |
          echo "No Go files changed, skipping unit tests"