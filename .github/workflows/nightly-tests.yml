name: Nightly Tests

permissions:
  contents: read

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  comprehensive-test:
    name: 'ðŸ§ª Nightly Test Suite'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 240
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          
      - name: Check Out  
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
          go-version: stable

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          TF_ACC=0 go test -p 16 -timeout 10m -v -race -coverprofile=coverage.txt -covermode=atomic -json ./... | tee unit-test-results.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          flags: unittests
          name: nightly-unit-tests
          fail_ci_if_error: false
          verbose: true

      - name: Run acceptance tests
        env:
          # Add required environment variables for acceptance tests
          TF_ACC: 1
          # M365_TENANT_ID: ${{ secrets.M365_TENANT_ID }}
          # M365_CLIENT_ID: ${{ secrets.M365_CLIENT_ID }}
          # M365_CLIENT_SECRET: ${{ secrets.M365_CLIENT_SECRET }}
          # M365_AUTH_METHOD: ${{ secrets.M365_AUTH_METHOD }}
          # M365_CLOUD: ${{ secrets.M365_CLOUD }}
        run: |
          echo "Running acceptance tests..."
          # Uncomment when environment secrets are configured:
          # TF_ACC=1 go test -p 10 -timeout 300m -v -race -coverprofile=acc-coverage.txt -covermode=atomic -json ./... | tee acc-test-results.json
          echo "Acceptance tests skipped - environment variables not configured"

      
      - name: Upload acceptance test coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./acc-coverage.txt
          flags: acceptancetests
          name: nightly-acceptance-tests
          fail_ci_if_error: false
          verbose: true

      - name: Generate test report
        run: |
          echo "# Nightly Test Report" > test-report.md
          echo "Date: $(date)" >> test-report.md
          echo "" >> test-report.md
          
          # Test summary from unit tests
          UNIT_TOTAL=$(grep -c '"Action":"pass"\|"Action":"fail"\|"Action":"skip"' unit-test-results.json || echo "0")
          UNIT_PASSED=$(grep -c '"Action":"pass"' unit-test-results.json || echo "0")
          UNIT_FAILED=$(grep -c '"Action":"fail"' unit-test-results.json || echo "0")
          UNIT_SKIPPED=$(grep -c '"Action":"skip"' unit-test-results.json || echo "0")
          
          echo "## Test Summary" >> test-report.md
          echo "### Unit Tests" >> test-report.md
          echo "- Total: $UNIT_TOTAL" >> test-report.md
          echo "- Passed: $UNIT_PASSED" >> test-report.md
          echo "- Failed: $UNIT_FAILED" >> test-report.md
          echo "- Skipped: $UNIT_SKIPPED" >> test-report.md
          echo "" >> test-report.md
          echo "### Acceptance Tests" >> test-report.md
          echo "- Status: Skipped (environment not configured)" >> test-report.md
          echo "" >> test-report.md
          
          # Coverage information
          if [ -f coverage.txt ]; then
            COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}')
            echo "## Coverage" >> test-report.md
            echo "- Unit Test Coverage: $COVERAGE" >> test-report.md
            echo "- Codecov Report: https://codecov.io/gh/${{ github.repository }}" >> test-report.md
            echo "" >> test-report.md
          fi
          
          # Failed tests details
          if [ "$UNIT_FAILED" -gt 0 ]; then
            echo "## Failed Unit Tests" >> test-report.md
            grep '"Action":"fail"' unit-test-results.json | jq -r '.Test // .Package' | sort -u >> test-report.md
            echo "" >> test-report.md
          fi
          
          # Package coverage breakdown
          if [ -f coverage.txt ]; then
            echo "## Package Coverage Breakdown" >> test-report.md
            go tool cover -func=coverage.txt | grep -v "total:" | awk '{print "- " $1 ": " $3}' >> test-report.md
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        if: always()
        with:
          name: nightly-test-results
          path: |
            unit-test-results.json
            test-report.md
            coverage.txt
          retention-days: 90

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            let reportContent = 'Failed to generate report';
            try {
              reportContent = fs.readFileSync('test-report.md', 'utf8');
            } catch (e) {
              console.log('Could not read test report:', e.message);
            }
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `The nightly test suite has failed.\n\n${reportContent}`,
              labels: ['bug', 'testing', 'automated']
            });