name: Unit Tests

permissions:
  contents: read

on:
  pull_request:
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  test:
    name: 'ðŸ§ª Run Go Unit Tests'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 120
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          
      - name: Check Out  
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
          go-version: stable

      - name: Install dependencies
        run: go mod download

      - name: Get changed packages
        id: changed-packages
        run: |
          # Get list of changed .go files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(go)$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Go files changed"
            echo "packages=" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed Go files:"
            echo "$CHANGED_FILES"
            
            # Extract unique package directories from changed files
            PACKAGES=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u | xargs -I {} echo "./{}")
            echo "Changed packages: $PACKAGES"
            echo "packages<<EOF" >> $GITHUB_OUTPUT
            echo "$PACKAGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Run unit tests for changed packages
        if: steps.changed-packages.outputs.has-changes == 'true'
        run: |
          echo "Running unit tests for changed packages..."
          go mod tidy
          go mod download
          
          PACKAGES="${{ steps.changed-packages.outputs.packages }}"
          echo "Testing packages: $PACKAGES"
          
          # Run unit tests only for changed packages
          echo "$PACKAGES" | xargs -I {} sh -c 'echo "Testing package: {}" && TF_ACC=0 go test -v -race {}'

      - name: Check for test files in changed packages
        if: steps.changed-packages.outputs.has-changes == 'true'
        run: |
          PACKAGES="${{ steps.changed-packages.outputs.packages }}"
          HAS_TESTS=false
          
          for pkg in $PACKAGES; do
            TEST_FILES=$(find "$pkg" -maxdepth 1 -name "*_test.go" 2>/dev/null | wc -l)
            if [ "$TEST_FILES" -gt 0 ]; then
              echo "Found $TEST_FILES test files in $pkg"
              HAS_TESTS=true
            else
              echo "No test files found in $pkg"
            fi
          done
          
          if [ "$HAS_TESTS" = false ]; then
            echo "ERROR: No test files found in any changed packages"
            echo "All Go code changes must include tests"
            exit 1
          fi

      - name: Skip - No Go changes
        if: steps.changed-packages.outputs.has-changes == 'false'
        run: |
          echo "No Go files changed, skipping unit tests"