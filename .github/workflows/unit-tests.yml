name: Unit Tests

permissions:
  contents: read

on:
  pull_request:
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  test:
    name: 'üß™ Run Go Unit Tests'
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 120
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          
      - name: Check Out  
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: .go-version
          cache: true
          go-version: stable

      - name: Install dependencies
        run: go mod download

      - name: Get changed packages
        id: changed-packages
        run: |
          # Get list of changed .go files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(go)$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Go files changed"
            echo "packages=" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed Go files:"
            echo "$CHANGED_FILES"
            
            # Extract unique package directories from changed files
            ALL_PACKAGES=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u)
            
            # Filter packages to only include those with test files
            PACKAGES_WITH_TESTS=""
            for pkg in $ALL_PACKAGES; do
              TEST_FILES=$(find "$pkg" -maxdepth 1 -name "*_test.go" 2>/dev/null | wc -l)
              if [ "$TEST_FILES" -gt 0 ]; then
                PACKAGES_WITH_TESTS="$PACKAGES_WITH_TESTS ./$pkg"
              else
                echo "Skipping $pkg (no test files)"
              fi
            done
            
            if [ -n "$PACKAGES_WITH_TESTS" ]; then
              echo "Packages with tests: $PACKAGES_WITH_TESTS"
              echo "packages<<EOF" >> $GITHUB_OUTPUT
              echo "$PACKAGES_WITH_TESTS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has-changes=true" >> $GITHUB_OUTPUT
            else
              echo "No packages with test files found"
              echo "packages=" >> $GITHUB_OUTPUT
              echo "has-changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Run unit tests for changed packages
        if: steps.changed-packages.outputs.has-changes == 'true'
        run: |
          echo "Running unit tests for changed packages..."
          go mod tidy
          go mod download
          
          PACKAGES="${{ steps.changed-packages.outputs.packages }}"
          echo "Testing packages: $PACKAGES"
          
          # Run unit tests only for changed packages
          echo "$PACKAGES" | xargs -I {} sh -c 'echo "Testing package: {}" && TF_ACC=0 go test -v -race {}'

      - name: Validate test coverage for changed packages
        run: |
          # Get list of changed .go files (excluding test files)
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(go)$' | grep -v '_test\.go$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No non-test Go files changed"
            exit 0
          fi
          
          # Extract unique package directories from changed non-test files
          ALL_PACKAGES=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u)
          
          MISSING_TESTS=false
          for pkg in $ALL_PACKAGES; do
            # Skip if it's a mocks directory
            if [[ "$pkg" == *"/mocks" ]]; then
              echo "Skipping test requirement check for mocks directory: $pkg"
              continue
            fi
            
            TEST_FILES=$(find "$pkg" -maxdepth 1 -name "*_test.go" 2>/dev/null | wc -l)
            if [ "$TEST_FILES" -gt 0 ]; then
              echo "‚úÖ Found $TEST_FILES test files in $pkg"
            else
              echo "‚ùå No test files found in $pkg"
              MISSING_TESTS=true
            fi
          done
          
          if [ "$MISSING_TESTS" = true ]; then
            echo ""
            echo "ERROR: Some packages with Go code changes are missing tests"
            echo "All Go code changes (except mocks) must include tests"
            exit 1
          else
            echo ""
            echo "‚úÖ All changed packages have appropriate test coverage"
          fi

      - name: Skip - No Go changes
        if: steps.changed-packages.outputs.has-changes == 'false'
        run: |
          echo "No Go files changed, skipping unit tests"